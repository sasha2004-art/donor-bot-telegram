import datetime
from aiogram import Router, F, types, Bot
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from bot.db import analytics_requests 
from bot.filters.role import RoleFilter
from bot.keyboards import inline
from bot.utils import analytics_service 
from bot.states.states import AdminAnalytics

router = Router(name="admin_analytics")

@router.callback_query(F.data == "admin_analytics", RoleFilter('admin'))
async def show_analytics_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìä <b>–ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –¥–∞—à–±–æ—Ä–¥</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=inline.get_analytics_main_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data == "analytics_kpi", RoleFilter('admin'))
async def show_main_kpi(callback: types.CallbackQuery, session: AsyncSession):
    await callback.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –¥–∞–Ω–Ω—ã–µ...")
    kpi_data = await analytics_requests.get_main_kpi(session)

    text_parts = ["üìà <b>–ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ (KPI)</b>\n"]
    text_parts.append(f"<b>–ù–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (30–¥):</b> {kpi_data['new_users_30d']}")
    text_parts.append(f"<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –¥–æ–Ω–æ—Ä—ã (90–¥):</b> {kpi_data['active_donors_90d']}")
    text_parts.append(f"<b>–°–µ–π—á–∞—Å –Ω–∞ –º–µ–¥–æ—Ç–≤–æ–¥–µ:</b> {kpi_data['on_waiver_now']}")

    if kpi_data['next_event']:
        event = kpi_data['next_event']
        days_left = (event['date'] - datetime.datetime.now()).days
        text_parts.append(f"\nüîú <b>–ë–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:</b> ¬´{event['name']}¬ª")
        text_parts.append(f"   - <b>–ó–∞–ø–∏—Å–∞–Ω–æ:</b> {event['registered']}/{event['limit']}")
        text_parts.append(f"   - <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π:</b> {days_left}")
    else:
        text_parts.append("\n‚ùå –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π.")
        
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    plot_data = await analytics_requests.get_donations_by_month(session)
    plot_image = analytics_service.plot_donations_by_month(plot_data)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—É—é —á–∞—Å—Ç—å
    await callback.message.edit_text(
        "\n".join(text_parts), 
        reply_markup=inline.get_analytics_main_menu_keyboard(),
        parse_mode="HTML"
    )
    # –ï—Å–ª–∏ –≥—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–ª—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if plot_image:
        await callback.message.answer_photo(
            photo=types.BufferedInputFile(plot_image.read(), filename="donations_plot.png")
        )

@router.callback_query(F.data == "analytics_events_select", RoleFilter('admin'))
async def select_event_for_analysis(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    past_events = await analytics_requests.get_past_events_for_analysis(session)
    if not past_events:
        await callback.answer("–ï—â–µ –Ω–µ –±—ã–ª–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è.", show_alert=True)
        return

    await callback.message.edit_text(
        "üìÖ <b>–ê–Ω–∞–ª–∏–∑ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=inline.get_events_for_analysis_keyboard(past_events)
    )
    await state.set_state(AdminAnalytics.choosing_event_for_analysis)
    await callback.answer()

@router.callback_query(AdminAnalytics.choosing_event_for_analysis, F.data.startswith("analyze_event_"))
async def show_event_analysis(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
    await state.clear()
    event_id = int(callback.data.split("_")[-1])
    
    await callback.answer("‚è≥ –°–æ–±–∏—Ä–∞—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é...")
    data = await analytics_requests.get_event_analysis_data(session, event_id)

    if not data:
        await callback.message.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é.")
        return

    text = [
        f"üìä <b>–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—é ¬´{data['event_name']}¬ª</b>\n",
        "<b>–í–æ—Ä–æ–Ω–∫–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è:</b>",
        f"  - –ó–∞–ø–∏—Å–∞–ª–æ—Å—å: {data['registered_count']}",
        f"  - –ü—Ä–∏—à–ª–æ: {data['attended_count']}",
        f"  - –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ —è–≤–∫—É: {data['conversion_rate']:.1f}%\n",
        "<b>–ü–æ—Ä—Ç—Ä–µ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏:</b>",
        f"  - –ù–æ–≤–∏—á–∫–∏: {data['newcomers_count']}",
        f"  - '–í–µ—Ç–µ—Ä–∞–Ω—ã': {data['veterans_count']}\n",
        "<b>–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞–º (–ø—Ä–∏—à–µ–¥—à–∏–µ):</b>"
    ]
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    sorted_faculties = sorted(data['faculties_distribution'].items(), key=lambda item: item[1], reverse=True)
    for faculty, count in sorted_faculties:
        text.append(f"  - {faculty}: {count} —á–µ–ª.")

    await callback.message.edit_text(
        "\n".join(text),
        parse_mode="HTML",
        reply_markup=inline.get_analytics_main_menu_keyboard()
    )

@router.callback_query(F.data == "analytics_reports", RoleFilter('admin'))
async def show_reports_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üìÑ <b>–û—Ç—á–µ—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç—á–µ—Ç–∞:",
        reply_markup=inline.get_reports_menu_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.callback_query(F.data.startswith("report_"), RoleFilter('admin'))
async def generate_report(callback: types.CallbackQuery, session: AsyncSession, bot: Bot):
    report_type = callback.data.split("_", 1)[1]
    report_titles = {
        "churn_donors": "–î–æ–Ω–æ—Ä—ã-–æ–¥–Ω–æ–¥–Ω–µ–≤–∫–∏",
        "lapsed_donors": "–£–≥–∞—Å–∞—é—â–∏–µ –¥–æ–Ω–æ—Ä—ã",
        "top_donors": "–î–æ–Ω–æ—Ä—ã-—á–µ–º–ø–∏–æ–Ω—ã",
        "rare_blood_donors": "–î–æ–Ω–æ—Ä—ã —Ä–µ–¥–∫–æ–π –∫—Ä–æ–≤–∏",
        "top_faculties": "–°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã",
        "dkm_candidates": "–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –≤ —Ä–µ–≥–∏—Å—Ç—Ä –î–ö–ú",
        "survey_dropoff": "–ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞"
    }
    report_title = report_titles.get(report_type, "–û—Ç—á–µ—Ç")

    await callback.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á–µ—Ç...")

    report_data = await analytics_service.create_report(session, report_type)

    if not report_data:
        await callback.message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ –æ—Ç—á–µ—Ç–∞.")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
    headers = list(report_data[0].keys())
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
    header_map = {
        "full_name": "–§–ò–û", "username": "Username", "donation_date": "–î–∞—Ç–∞ –¥–æ–Ω–∞—Ü–∏–∏",
        "donation_count": "–î–æ–Ω–∞—Ü–∏–π", "last_donation_date": "–ü–æ—Å–ª–µ–¥–Ω—è—è –¥–æ–Ω–∞—Ü–∏—è", "rank": "–†–∞–Ω–≥",
        "blood_group": "–ì—Ä—É–ø–ø–∞ –∫—Ä–æ–≤–∏", "faculty_name": "–§–∞–∫—É–ª—å—Ç–µ—Ç", "survey_date": "–î–∞—Ç–∞ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞"
    }
    pretty_headers = [header_map.get(h, h) for h in headers]

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    col_widths = {h: len(pretty_headers[i]) for i, h in enumerate(headers)}
    for row in report_data:
        for key, value in row.items():
            col_widths[key] = max(col_widths[key], len(str(value)))

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    report_lines = []
    report_lines.append(f"–û—Ç—á–µ—Ç: {report_title}")
    report_lines.append("=" * (sum(col_widths.values()) + len(col_widths) * 3 -1))

    header_line = "  ".join(h.ljust(col_widths[headers[i]]) for i, h in enumerate(pretty_headers))
    report_lines.append(header_line)
    report_lines.append("-" * len(header_line))

    for row in report_data:
        row_list = []
        for header in headers:
            value = row.get(header, "")
            if isinstance(value, datetime.datetime) or isinstance(value, datetime.date):
                value = value.strftime('%Y-%m-%d')
            row_list.append(str(value).ljust(col_widths[header]))
        report_lines.append("  ".join(row_list))

    report_text = "\n".join(report_lines)

    await bot.send_document(
        chat_id=callback.from_user.id,
        document=types.BufferedInputFile(
            report_text.encode("utf-8"),
            filename=f"report_{report_type}.txt"
        ),
        caption=f"–û—Ç—á–µ—Ç: {report_title}"
    )